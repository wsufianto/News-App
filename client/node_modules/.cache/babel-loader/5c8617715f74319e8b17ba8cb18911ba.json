{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetch = urlLink => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errMessage, setErrMessage] = useState('');\n  useEffect(() => {\n    const source = axios.CancelToken.source();\n\n    const getNews = async () => {\n      try {\n        const response = await axios.get(urlLink, {\n          cancelToken: source.token\n        });\n        setData(response.data);\n        setIsLoading(false);\n        setErrMessage('');\n      } catch (err) {\n        if (axios.isCancel(err)) {\n          console.log('fetch cancelled!');\n        } else {\n          setIsLoading(false);\n          setErrMessage(err.message);\n        }\n      }\n    };\n\n    getNews(); // console.log(\"Use Effect in use!\")\n\n    return () => {\n      // console.log(\"Cleanup\")\n      source.cancel();\n    };\n  }, [urlLink]);\n  return {\n    data,\n    setData,\n    isLoading,\n    errMessage\n  };\n};\n\n_s(useFetch, \"p3JgbfnwAm/oVR+ABDsdouj4VG0=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/wsufianto/Documents/JWD/Coding/Learn-React/react-todolist/client/src/Helpers/useFetch.js"],"names":["useState","useEffect","axios","useFetch","urlLink","data","setData","isLoading","setIsLoading","errMessage","setErrMessage","source","CancelToken","getNews","response","get","cancelToken","token","err","isCancel","console","log","message","cancel"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,OAAD,IAAa;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,MAAM,GAAGT,KAAK,CAACU,WAAN,CAAkBD,MAAlB,EAAf;;AAEA,UAAME,OAAO,GAAG,YAAY;AAC1B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUX,OAAV,EAAmB;AACxCY,UAAAA,WAAW,EAAEL,MAAM,CAACM;AADoB,SAAnB,CAAvB;AAGAX,QAAAA,OAAO,CAACQ,QAAQ,CAACT,IAAV,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,aAAa,CAAC,EAAD,CAAb;AACD,OAPD,CAOE,OAAMQ,GAAN,EAAW;AACX,YAAIhB,KAAK,CAACiB,QAAN,CAAeD,GAAf,CAAJ,EAAyB;AACvBE,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,SAFD,MAEO;AACLb,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,aAAa,CAACQ,GAAG,CAACI,OAAL,CAAb;AACD;AACF;AACF,KAhBD;;AAiBAT,IAAAA,OAAO,GApBO,CAqBd;;AAEA,WAAO,MAAM;AACX;AACAF,MAAAA,MAAM,CAACY,MAAP;AACD,KAHD;AAID,GA3BQ,EA2BN,CAACnB,OAAD,CA3BM,CAAT;AA6BA,SAAO;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,SAAjB;AAA4BE,IAAAA;AAA5B,GAAP;AACD,CAnCD;;GAAMN,Q;;AAqCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst useFetch = (urlLink) => {\n  const [data, setData] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [errMessage, setErrMessage] = useState('')\n\n  useEffect(() => {\n    const source = axios.CancelToken.source();\n\n    const getNews = async () => {\n      try {\n        const response = await axios.get(urlLink, {\n          cancelToken: source.token\n        })\n        setData(response.data)\n        setIsLoading(false)\n        setErrMessage('')\n      } catch(err) {\n        if (axios.isCancel(err)) {\n          console.log('fetch cancelled!')\n        } else {\n          setIsLoading(false)\n          setErrMessage(err.message)\n        }\n      } \n    }\n    getNews()\n    // console.log(\"Use Effect in use!\")\n\n    return () => {\n      // console.log(\"Cleanup\")\n      source.cancel()\n    }  \n  }, [urlLink])\n\n  return { data, setData, isLoading, errMessage }\n}\n\nexport default useFetch"]},"metadata":{},"sourceType":"module"}